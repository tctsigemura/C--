/*
 * Programing Language C-- "Compiler"
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lib/environ.cmm : 環境変数
 *
 * 2019.11.13: 新規作成
 *
 * $Id$
 */
#include <crt0.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <syslib.hmm>
#include <errno.hmm>

public char[][] environ;

int capacity;                                               // 現在 environ に入れられる環境変数の個数

// 環境変数の初期化
public void _environInit(char[][] envp) {
  int envs = 0;
  while (envp[envs] != null) envs = envs + 1;               // 要素数を得る
  environ = malloc(sizeof(char[]) * (envs + 1));            // 要素数 + null
  environ[envs] = null;                                     // null 終端
  for (int i = 0; i < envs; i = i + 1) {                    // 要素をコピー
    int len = strLen(envp[i]);
    environ[i] = malloc(len + 1);
    strCpy(environ[i], envp[i]);
  }
  capacity = envs;                                          // 容量を更新
}

// 環境変数の environ 中のインデックスを返す。存在しなければ null (番兵) のインデックスを返す。
int envIndex(char[] name) {
  int len = strLen(name);
  int i = 0;
  while (environ[i] != null) {
    int nameLen = strChr(environ[i], '=');
    if (len == nameLen &&
      strNcmp(environ[i], name, len) == 0)
      return i;
    i = i + 1;
  }
  return i;
}

// 環境変数の値を返す。存在しなければ null を返す。
public char[] getEnv(char[] name) {
  if (name == null) _exit(EINVAL);                          // name が null ならエラー
  int index = envIndex(name);
  if (environ[index] == null) return null;                  // 存在しなければ null を返す
  return _addrAdd(environ[index], strLen(name) + 1);        // 値部分を返す
}

// 環境変数を設定する。
public void putEnv(char[] string) {
  if (string == null) _exit(EINVAL);                        // string が null ならエラー
  int nameLen = strChr(string, '=');                        // '=' の位置 == 名前の長さ
  if (nameLen <= 0) _exit(EINVAL);                          // 値がないか、名前の長さが 0 ならエラー
  string[nameLen] = '\0';                                   // string を name と value に分割する
  setEnv(string, _addrAdd(string, nameLen + 1), true);      // setEnv に渡す
  string[nameLen] = '=';                                    // string を元に戻す
}

// 環境変数を設定する。overwrite が false で既に同名の環境変数が存在するなら何もしない。
public void setEnv(char[] name, char[] value, boolean overwrite) {
  if (name == null || value == null) _exit(EINVAL);         // name か value が null ならエラー
  int nameLen = strLen(name);
  if (nameLen == 0 || strChr(name, '=') >= 0) _exit(EINVAL);// name の長さが 0 もしくは '=' を含む場合はエラー
  int valueLen = strLen(value);
  int index = envIndex(name);                               // 環境変数の位置を調べる
  if (environ[index] == null) {                             // 環境変数が存在しない
    int envs = index + 1;                                   //    environ[index]==null のとき、 index=envs
    if (envs > capacity) {                                  //    environ の容量が足りない場合
      char[][] newEnv = malloc(sizeof(char[]) * (envs + 1));//    新しい環境変数の領域を確保する
      for (int i = 0; i < envs; i = i + 1)                  //   すべての環境変数を
        newEnv[i] = environ[i];                             //     newEnv にコピーする
      newEnv[envs] = null;                                  //   null 終端
      free(environ);                                        //   古い環境変数の領域を解放
      environ = newEnv;                                     //   新しい環境変数の領域で置換え
      capacity = envs;                                      //   容量を更新
    }
    environ[index] = malloc(nameLen + 1 + valueLen + 1);    //   メモリ確保
    strCpy(environ[index], name);                           //   名前を格納
    environ[index][nameLen] = '=';                          //   '=' を格納
  } else {                                                  // 環境変数が存在する
    if (!overwrite) return;                                 //   overwrite が false なら終了
    if (valueLen > strLen(environ[index]) - nameLen - 1) {  //   新しい値が現在の値より長い場合
      free(environ[index]);                                 //     メモリ解放
      environ[index] = malloc(nameLen + 1 + valueLen + 1);  //     メモリ確保
      strCpy(environ[index], name);                         //     名前を格納
      environ[index][nameLen] = '=';                        //     '=' を格納
    }
  }
  strCpy(_addrAdd(environ[index], nameLen + 1), value);     // 値を格納
}

// 環境変数を削除する。存在しなければ何もしない。
public void unsetEnv(char[] name) {
  if (name == null) _exit(EINVAL);                          // name が null ならエラー
  int index = envIndex(name);
  if (environ[index] == null) return;                       // 環境変数が存在しなければ何もしない
  free(environ[index]);                                     // メモリ解放
  for (int i = index; environ[i] != null; i = i + 1)        // 後ろの環境変数 (null 終端も含む) を
    environ[i] = environ[i + 1];                            //   前につめる
}
