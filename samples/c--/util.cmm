/*
 * Programing Language C-- "Compiler"
 *    Tokuyama kousen Educational Computer 16bit Ver.
 *
 * Copyright (C) 2002-2010 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * util.cmm : 良く使う関数
 *
 * 2016.02.24         : substr を追加
 * 2016.01.28         : C 言語から C-- 言語にコンパイラの記述言語を変更
 * 2012.12.30         : error2 を追加
 * 2010.07.20         : Subversion による管理を開始
 * 2009.07.21 v.0.8   : string 型の使用を廃止
 * 2008.08.26 v.0.6   : エラーメッセージにファイル名を追加
 * 2007.09.20 v.0.5   : 初期バージョン
 *
 * $Id$
 *
 */

#include <stdio.hmm>
#include <stdlib.hmm>
#include <ctype.hmm>
#include <string.hmm>

#include "lexical.hmm"
#include "util.hmm"

/* 文字列の最後が一致してるか比較する */
public boolean strEndsWith(char[] str, char[] suffix){
  int len1 = strlen(str);
  int len2 = strlen(suffix);
  for(int i = 0; i < len2; i=i+1)
    if(str[len1-i]!=suffix[len2-i])
      return false;
  return true;
}

// エラーメッセージを表示して終了する
public void errmsg() {
  fprintf(stderr,"\"%s\": %d : ", lxGetFname(), lxGetLn());
}

public void error(char[] s) {
  errmsg();
  fprintf(stderr,"%s\n", s);
  exit(1);
}

public void error2(char[] s1, char[] s2) {
  errmsg();
  fprintf(stderr,"%s : %s\n", s2, s1);
  exit(1);
}

// 領域を割り当ててエラーチェック
public void[] ealloc(int s) {
  void[] p = malloc(s);
  if (p==null) {
    error("メモリ割り当て");
  }
  return p;
}

// 以下は ctype.h にありそうで存在しない関数

// 区切り記号かテスト
public boolean isDelim(char ch) {
  return !isalnum(ch) && ch!='_';                    // アルファベット, '_'以外
}

// 8進数字かテスト
public boolean isOdigit(char ch) {
  return ord('0') <= ord(ch) && ord(ch) <= ord('7'); // '0'〜'7'が8進数
}

// 文字列の一部を文字列として返す
void[] _addrAdd(void[], int pos);
public char[] subStr(char[] str, int pos) {
  return _addrAdd(str, pos);
}
