/*
 * Programing Language C-- "Compiler"
 *    Tokuyama kousen Educational Computer 16bit Ver.
 *
 * Copyright (C) 2002-2015 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * vm.hmm : 仮想マシンのコードから実際のコードを生成するプログラムで準備
 *        すべき関数のプロトタイプ
 *
 * 2016.02.06         : C 言語から C-- 言語にコンパイラの記述言語を変更
 * 2015.08.31 v2.1.0  : vmEntryK を追加
 * 2010.12.23         : 仮想マシンのニーモニックを大幅に変更
 *                      変更(JNZ=>JT,JZ=>JF,DC=>DW,DS=>WS)
 *                      追加(LDB,STB,DB,BS)
 * 2010.09.12 v1.0.0  : 最適化と外部変数の定数式による初期化ができる H8 統合版
 * 2010.09.09         : 初期化データでaddrofを使用できるようにvmDcNameを追加
 * 2010.08.31         : AADD を削除し、SCALE を追加
 * 2010.08.23         : RETP, RETF を統合し、
 *                      返り値レジスタに値を移動する命令 MREG を追加
 * 2010.08.16         : アドレス計算用の命令 AADD を追加
 * 2010.07.20         : Subversion による管理を開始
 * 2010.04.10         : データ生成機能を追加
 * 2010.04.01 v0.9.11 : 初期バージョン
 *
 * $Id$
 *
 */

#define P public


P void vmName(int idx);              // 名前を表現するラベルを印刷する
P void vmTmpLab(int lab);            // コンパイラが生成した番号のラベルを印刷
P void vmEntry(int depth, int idx);  // 関数の入口
P void vmEntryK(int depth, int idx); // カーネル用、関数の入口
P void vmRet();                      // 関数の出口
P void vmEntryI(int depth, int idx); // 割り込み関数の入口
P void vmRetI();                     // 割り込み関数の出口
P void vmMReg();                     // スタックトップを返り値レジスタに移動する
P void vmArg();                      // スタックトップを引数領域に移動する
P void vmCallP(int n, int idx);      // 値を返さない関数を呼び出す
P void vmCallF(int n, int idx);      // 値を返す関数を呼び出す
P void vmJmp(int lab);               // 無条件ジャンプ
P void vmJT(int lab);                // 論理値を取り出し true ならジャンプ
P void vmJF(int lab);                // 論理値を取り出し false ならジャンプ
P void vmLdCns(int c);               // 定数をスタックにロードする
P void vmLdGlb(int idx);             // 大域変数の値をスタックに積む
P void vmLdLoc(int n);               // n番目のローカル変数の値をスタックに積む
P void vmLdArg(int n);               // n番目の引数の値をスタックに積む
P void vmLdStr(int lab);             // 文字列のアドレスをスタックに積む
P void vmLdLab(int idx);             // ラベルの値(アドレス)をスタックに積む
P void vmLdWrd();                    // ワード配列からスタックに積む
P void vmLdByt();                    // バイト配列からスタックに積む
P void vmStGlb(int idx);             // 大域変数にストアする
P void vmStLoc(int n);               // n番目のローカル変数にストアする
P void vmStArg(int n);               // n番目の引数にストアする
P void vmStWrd();                    // ワード配列にストアする
P void vmStByt();                    // バイト配列にストアする
P void vmNeg();                      // ２の補数を計算し結果をスタックに積む
P void vmNot();                      // 論理の否定を計算し結果をスタックに積む
P void vmBNot();                     // １の補数を計算し結果をスタックに積む
P void vmChar();                     // 文字型のビット数だけ残しスタックに積む
P void vmBool();                     // 最下位１ビットだけ残しスタックに積む
P void vmAdd();                      // 和を計算し結果をスタックに積む
P void vmSub();                      // 差を計算し結果をスタックに積む
P void vmShl();                      // 左シフトし結果をスタックに積む
P void vmShr();                      // 右シフトし結果をスタックに積む
P void vmBAnd();                     // ビット毎の論理積をスタックに積む
P void vmBXor();                     // ビット毎の排他的論理和をスタックに積む
P void vmBOr();                      // ビット毎の論理和をスタックに積む
P void vmMul();                      // 積を計算し結果をスタックに積む
P void vmDiv();                      // 商を計算し結果をスタックに積む
P void vmMod();                      // 余を計算し結果をスタックに積む
P void vmScl();                      // 配列や添字の添字を相対アドレスに変換
P void vmGt();                       // 比較(>)結果(論理値)をスタックに積む
P void vmGe();                       // 比較(>=)結果(論理値)をスタックに積む
P void vmLt();                       // 比較(<)結果(論理値)をスタックに積む
P void vmLe();                       // 比較(<=)結果(論理値)をスタックに積む
P void vmEq();                       // 比較(==)結果(論理値)をスタックに積む
P void vmNe();                       // 比較(!=)結果(論理値)をスタックに積む
P void vmPop();                      // スタックから値を一つ取り出し捨てる

/*
 * || 論理式の最後で論理値を求めるマクロ命令
 * (以下のようなニーモニックを生成する)
 *
 *       L2 != -1          |      L2 == -1
 * ------------------------+------------------------
 *          JMP   L3       |         JMP   L3
 *    L1                   |    L1
 *          LDC   1        |         LDC   1
 *          JMP   L3       |    L3
 *    L2                   |
 *          LDC   0        |
 *    L3                   |
 */
P void vmBoolOR(int L1, int L2, int L3);

/*
 * && 論理式の最後で論理値を求めるマクロ命令
 * (以下のようなニーモニックを生成する)
 *
 *       L2 != -1          |      L2 == -1
 * ------------------------+------------------------
 *          JMP   L3       |         JMP   L3
 *    L1                   |    L1
 *          LDC   0        |         LDC   0
 *          JMP   L3       |    L3
 *    L2                   |
 *          LDC   1        |
 *    L3                   |
 */
P void vmBoolAND(int L1, int L2, int L3);

/*
 *  データ生成用の疑似命令
 */
P void vmDwName(int idx);            // 名前へのポインタを生成する
P void vmDwLab(int lab);             // Ln ラベルへのポインタを生成する
P void vmDwCns(int n);               // 1 ワードの整数データを生成する
P void vmDbCns(int n);               // 1 バイトの整数データを生成する
P void vmWs(int n);                  // n ワードの領域を生成する
P void vmBs(int n);                  // n バイトの領域を生成する
P void vmStr(char[] s);              // 文字列を生成する
#undef P
